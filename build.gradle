buildscript {
    ext.kotlin_version = '1.4.30'
    ext.ktor_version = '1.5.1'
    ext.mockk_version = '1.10.6'
    ext.okhttp_version = '4.9.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.postgresql:postgresql:42.2.10"
    }
}

plugins {
    id "org.flywaydb.flyway" version "6.3.1"
}

subprojects {
    if (name == "applications" || name == "components") return

    group "io.milk"

    apply plugin: 'kotlin'

    defaultTasks "clean", "build"

    test {
        gradle.taskGraph.whenReady {
            taskGraph ->
                if (!taskGraph.hasTask(stage)) {
                    def file = file("${project.rootDir.toString()}/.env_test")
                    if (file.exists()) {
                        file.readLines().each() {
                            if (!it.isEmpty()) {
                                def pos = it.indexOf("=")
                                def key = it.substring(0, pos).replace("export ", "")
                                def value = it.substring(pos + 1)
                                environment key, value
                            }
                        }
                    }
                }
        }
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "io.ktor:ktor-server-jetty:$ktor_version"
        compile "io.ktor:ktor-html-builder:$ktor_version"

        compile "ch.qos.logback:logback-classic:1.2.3"

        testCompile "io.ktor:ktor-server-test-host:$ktor_version"
        testCompile "io.mockk:mockk:$mockk_version"
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    sourceSets {
        main.kotlin.srcDir "src/main/kotlin"
        main.resources.srcDir "src/main/resources"

        test.kotlin.srcDir "src/test/kotlin"
        test.resources.srcDir "src/test/resources"
    }

    // needed for heroku
    task stage(dependsOn: ['build', 'clean'])
    build { mustRunAfter "clean" }
    gradle.taskGraph.whenReady {
        taskGraph ->
            if (taskGraph.hasTask(stage)) {
                test.enabled = false
            }
    }
}